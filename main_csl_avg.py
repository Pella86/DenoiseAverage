# -*- coding: utf-8 -*-
"""
Created on Mon Jun 19 16:30:42 2017

@author: Mauro

"""

# Define Imports

import sys
sys.path.append("./src")


# numpy import
import numpy as np

# matplotlib imports
from matplotlib import pyplot as plt

# pyimpots
from os.path import isdir, join
from os import mkdir
from copy import deepcopy

import sys
import shutil

# myimports
from LogTimes import Logger
from AvgFolder_class import AvgFolderMem, AvgFolder, AnalyzeShifts
from MyImage_class import MyImage
from MyRGBImage_class import MyRGBImg
from AvgRGB_class import AvgRGBMemSave, AvgRGB, get_pathname




def main(argv):
    help_message  = "---------------- HELP ----------------\n"
    help_message += "Usage:\n"
    help_message += "pythong main_avg.py -d path/to/folder/ -cd -cdrgb -avg -avgrgb -graph\n"
    help_message += "  -d | --directory: path to any directory, the program will generate the dataset, or calculate the average in the folder.\n"
    help_message += "  -cd: creates gray scale dataset.\n"
    help_message += "  -cdrgb: creates rgb scale dataset.\n"
    help_message += "  -avg: calculates the alignment and average of the picture in greyscale mode.\n"
    help_message += "  -avgrgb: calculates and outputs a rgb average, needs the data from -avg.\n"
    help_message += "  -graph: calculates and outputs the movement and angles graphs, needs the data from -avg.\n"
    help_message += "  -s: sound at the end of process.\n"    
    help_message += "  -h, --help: prints this.\n"
    
    
    path, name, ext = get_pathname(argv[0])
    print("Script:", name + ext, "started")
    
    # main_avg.py -d path/to/dir -o 011111 | -h
    
    # get the arguments
    opts = argv[1:]
    
    folder = ""
    create_dataset = False
    create_rgb_dataset = False
    avgerage_gray = False
    average_rgb = False
    produce_graphs = False
    sound_of_silence = False

    
    if len(opts) == 1 and opts in ('-h', '--help'):
        print(help_message)
    else:
        nopt = 0
        while nopt < len(opts):
            opt = opts[nopt]
            if opt in ("-d", "--directory"):
                try:
                    nopt += 1 
                    folder = opts[nopt]
                except IndexError:
                    pass
            if opt == "-cd":
                create_dataset = True
            if opt == "-cdrgb":
                create_rgb_dataset = True
            if opt == "-avg":
                avgerage_gray = True
            if opt == "-avgrgb":
                average_rgb = True
            if opt == "-graph":
                produce_graphs = True
            if opt == "-s":
                sound_of_silence = True
            nopt += 1
    
    inopt = [create_dataset, create_rgb_dataset, avgerage_gray, average_rgb, produce_graphs]
    
    if isdir(folder):
        if all(opt == False for opt in inopt):
            print("No options chosen")
            print("")
            print(help_message)
        if create_dataset:
            run_create_test_dataset(folder)
        
        if create_rgb_dataset:
            run_create_rgb_dataset(folder)
       
        if avgerage_gray:
            run_average_gray(folder)
        
        if average_rgb:
            run_average_rgb(folder)
    
        if produce_graphs:
            run_produce_graphs(folder)   
        
        if sound_of_silence:
            import winsound
            Freq = 2500 # Set Frequency To 2500 Hertz
            Dur = 1000 # Set Duration To 1000 ms == 1 second
            winsound.Beep(Freq,Dur)            
    else:
        print("-d option is not a folder")
        print("")
        print(help_message)
    


def run_create_test_dataset(folder):
    debug_mode = True
    
    # set parameters    
    testdatasetpath = folder
    mypicname = "./data/Lenna.png"    
    
    n_pictures = 25
    min_a = -10
    max_a = 10
    min_xs = -25
    max_xs = 25
    min_ys = -25
    max_ys = 25
    flip_angle = True

    mylog = Logger("Create gray dataset", testdatasetpath + "main_logfile.txt", debug_mode = debug_mode)
    
    mylog.log("Creating dataset in:\n" + testdatasetpath)
    mylog.log("Using the picture: " + mypicname)
    
    mylog.log("Creating dataset with {0} pictures".format(n_pictures) )
    mylog.log("With rotations from {0} to {1} degree".format(min_a, max_a))
    mylog.log("With shift in x: from {0} to {1} and y: from {2} to {3}".format(min_xs, max_xs, min_ys, max_ys))
    mylog.log("The dataset will be generated by {0} randomly flipping rotations and translations".format("" if flip_angle == True else "not"))

    if not isdir(testdatasetpath):
        mkdir(testdatasetpath)  
        mylog.log("Created test dataset path")
    
    # create a test dataset:

    mypic = MyImage(mypicname)
    mypic.squareit()
    mypic.convert2grayscale()
    mypic.binning(2)
    mypic.normalize()
    
    mylog.log("Processing done")
    
    template_folder = join(testdatasetpath, "template_folder")
    
    if not isdir(template_folder):
        mkdir(template_folder)
        
    mypic.save(join(template_folder, "template.png"))
    mylog.log("Saved the original image in the template folder")
    
    if debug_mode:
        mypic.show_image()
        plt.show()
    
    mylog.log("------------------------------\nCreating dataset\n------------------------------")

    np.random.seed(10)
    
    logpathdir = join(testdatasetpath, "tlog")
    if not isdir(logpathdir):
        mkdir(logpathdir)       
    
    with open(join(logpathdir, "mytransformations.log"), 'w') as f:
        angles = np.random.uniform(min_a, max_a, n_pictures)
        for i in range(n_pictures):
            image = deepcopy(mypic)
            if flip_angle:
                anglefirst = False if np.random.randint(0,2) == 0 else True
            else:
                anglefirst = True
            
            
            angle = angles[i]
            dx = np.random.randint(min_xs, max_xs)
            dy = np.random.randint(min_ys, max_ys)
            
            f.write("{0} {1} {2} {3}\n".format(anglefirst, dx, dy, angle))
            mylog.log("Pictrue with: rot first {0}, angle: {1}, shift x: {2}, y: {3} created".format(anglefirst, angle, dx, dy))
            
            
            if anglefirst:
                image.rotate(angle)
                image.move(dx, dy)
            else:
                image.move(dx, dy) 
                image.rotate(angle)
                
            if debug_mode:   
                image.show_image()
                plt.show()
            
            image.save(join(testdatasetpath, "pic_" + str(i) + ".png"))             

def run_average_gray(folder):
    # options  
    debug_mode = True
    
    # chose path to image sequence folder
    datasetpath = folder   
    
    memsave = True # True | False
    
    preprocop = [("convert to grayscale",),
                 ("square it",),
                 ("binning", 0),
                 ("transpose",),
                 ("normalize",)]
    
    custom_template = False # True | False
    template_image_path = folder + "template_folder/template.png"  # path to image
    
    auto_template_type = "UseFirstImage" # "Use First Image" | "Average"
    save_template = True # True | False
    
    align_images = True # True | False
    align_mode = "fixed" # "fixed | tree" // fixed still fastest option
    align_space = (-1, 1, 0.1) # (min angle, max angle, precision)
    
    
    
    
    # logger
    mylog = Logger("Averaging Gray", datasetpath + "main_logfile.txt", debug_mode = debug_mode)

    mylog.log("Debug mode: " + "ON" if debug_mode == True else "OFF")
    mylog.log("For the folder:")
    mylog.log(datasetpath)
    mylog.log("Averaging type: grey")
    mylog.log("Memory saving mode: " + str(memsave))
    
        
        
        
    mylog.log("------------------------------\nLoading dataset\n------------------------------")
    if memsave:
        avg = AvgFolderMem(datasetpath)
    else:
        avg = AvgFolder(datasetpath)
        
    
    avg.gather_pictures()
    # build the informatiosn
    mylog.log("number of pictures:" + str(avg.init_imgs.n))
    image = avg.init_imgs.get_image(0)
    mylog.log("Size of images: " + str(image.data.shape[0]) + "x" + str(image.data.shape[1]))
    
    mylog.log("--- Start preporcessing ---", True)
    
    nametofunc = {} 
    nametofunc[preprocop[0]] = lambda : avg.c2gscale()
    nametofunc[preprocop[1]] = lambda : avg.squareit()
    nametofunc[preprocop[2]] = lambda n : avg.binning(n)
    nametofunc[preprocop[3]] = lambda : avg.transpose()
    nametofunc[preprocop[4]] = lambda : avg.normalize()
    
    for name in preprocop:
        if len(name) == 1:
            nametofunc[name]()
            mylog.log("Process: " + name[0])
        if len(name) == 2:
            nametofunc[name](name[1])
            mylog.log("Process: " + name[0] + "Arguments: " + str(name[1]))
    mylog.log("Processing took: ", True)
    
    mylog.log("------------------------------\nGenerating template\n------------------------------")
    
    if custom_template:
        custom_t = MyImage(template_image_path)
        custom_t.convert2grayscale()
        mylog.log("Template loaded from: " + template_image_path)
        mylog.log("Template image is: {0}x{1}".format(custom_t.get_sizex(), custom_t.get_sizey()))
        avg.generate_template(custom_t)
    else:
        avg.generate_template(auto_template_type)
        mylog.log("Template generated: " + auto_template_type)
    
    mylog.log("Template generated", True)
    
    if save_template:
        avg.save_template()
    
    if debug_mode:
        avg.template.show_image()
        plt.show()  
        avg.template.inspect()

    
    if align_images:
        mylog.log("------------------------------\nAlignment\n------------------------------")
        mylog.log("Choosen Aligment: " + align_mode)
        alignnames = ["min angle: ", " |max angle: ", " |precision: "]
        mylog.log("".join(a + str(d) for a, d in zip(alignnames, align_space)))
        avg.align_images(align_mode, align_space, debug_mode)
        avg.save_shifts()
        
        mylog.log("Alignment done", True)
        if avg.anglestree != None:
            mylog.log("Numnber of template generated: " + str(len(avg.anglestree.angles_nodes)))
            mylog.log("Normally would be: " + str(len(np.arange(align_space[0], align_space[1], align_space[2]))))
        else:
           mylog.log("Numnber of template generated: " + str(avg.templaterotsft.n)) 
        mylog.log("Shifts saved")
        
        mylog.log("------------------------------\nAverage\n------------------------------")
        avg.average(debug = debug_mode)
        avg.save_avg()
        mylog.log("Average Complete", True)
        
        if debug_mode:
            avg.avg.show_image()
            plt.show() 
            avg.avg.inspect()                
        
    mylog.log("End procedure", True)
    

def run_create_rgb_dataset(folder):

    debug_mode = True
    
    # set parameters    
    testdatasetpath = folder
    mypicname = "./data/volpe-2.png"    
    
    n_pictures = 25
    min_a = -10
    max_a = 10
    min_xs = -25
    max_xs = 25
    min_ys = -25
    max_ys = 25
    flip_angle = True



    mylog = Logger("Create RGB dataset", testdatasetpath + "main_logfile.txt", debug_mode = debug_mode)
    
    mylog.log("Creating dataset in:\n" + testdatasetpath)
    mylog.log("Using the picture: " + mypicname)
    
    mylog.log("Creating dataset with {0} pictures".format(n_pictures) )
    mylog.log("With rotations from {0} to {1} degree".format(min_a, max_a))
    mylog.log("With shift in x: from {0} to {1} and y: from {2} to {3}".format(min_xs, max_xs, min_ys, max_ys))
    mylog.log("The dataset will be generated by {0} randomly flipping rotations and translations".format("" if flip_angle == True else "not"))

    if not isdir(testdatasetpath):
        mkdir(testdatasetpath)   
        mylog.log("Created test dataset path")

    # create a test dataset:
    mypic = MyRGBImg(mypicname)
    mypic.binning(2)
    
    mylog.log("Processing done")


    template_folder = join(testdatasetpath, "template_folder")       
    if not isdir(template_folder):
        mkdir(template_folder)

    mypic.save(join(template_folder, "template.png"))
    if debug_mode:    
        mypic.show_image()
        plt.show()
        
    mylog.log("------------------------------\nCreating dataset\n------------------------------")

    np.random.seed(10)

    logpathdir = join(testdatasetpath, "tlog")
    if not isdir(logpathdir):
        mkdir(logpathdir)  
    
    with open(join(logpathdir, "mytransformations.log"), 'w') as f:
        angles = np.random.uniform(min_a, max_a, n_pictures)
        for i in range(n_pictures):
            image = deepcopy(mypic)
            if flip_angle:
                anglefirst = False if np.random.randint(0,2) == 0 else True
            else:
                anglefirst = True
            
            
            angle = angles[i]
            dx = np.random.randint(min_xs, max_xs)
            dy = np.random.randint(min_ys, max_ys)
            
            f.write("{0} {1} {2} {3}\n".format(anglefirst, dx, dy, angle))
            mylog.log("Pictrue with: rot first {0}, angle: {1:.2f}, shift x: {2}, y: {3} created".format(anglefirst, angle, dx, dy))
            
            
            if anglefirst:
                image.rotate(angle)
                image.move(dx, dy)
            else:
                image.move(dx, dy) 
                image.rotate(angle)
                
            if debug_mode:   
                image.show_image()
                plt.show()
            
            image.save(join(testdatasetpath, "pic_" + str(i) + ".png"))

def run_produce_graphs(folder):
    a = AnalyzeShifts(join(folder, "avg/results/shifts_log.txt"))
    
    a.plot_xy()
    a.plot_angles()    
    

def run_average_rgb(folder):
    debug_mode = True
    
    datasetpath = folder
    
    memsave = True # True | False
    
    mean_mode = "Mean"  # Mean | Median | Mode   
    
    algimages = True # True | False
    
    usealgimages = True # True | False

    
    mylog = Logger("Average RGB dataset", datasetpath + "main_logfile.txt", debug_mode = debug_mode)    
    mylog.log("Debug mode: " + "ON" if debug_mode == True else "OFF")
    mylog.log("For the folder:")
    mylog.log(datasetpath)
    mylog.log("Averaging type: rgb")
    mylog.log("Memory saving mode: " + str(memsave))
    
    if memsave:
        avg = AvgRGBMemSave(datasetpath)
    else:
        avg = AvgRGB(datasetpath)
    
   
        
    avg.gather_pictures_names()
    

    # build the informatiosn
    mylog.log("number of pictures:" + str(len(avg.imgs_names)))
    image = avg.get_image(0)
    mylog.log("Size of images: " + str(image.data.shape[0]) + "x" + str(image.data.shape[1]))
    
    mylog.log("Loaded names")
    
    if algimages:
        avg.load_algs()
        mylog.log("Loaded aligments: " + str(len(avg.algs)))
 
    mylog.log("--- Start preporcessing ---", True) 
    
    if algimages:
        avg.align_images(debug = debug_mode)
        mylog.log("Aligned Images", True)

    avg.average(mode = mean_mode, aligned = usealgimages, debug = debug_mode)
        
    mylog.log("Averaged Images", True)
    
    avg.save_avg()
    
    mylog.log("- End process -")

def run_clean_up(folder):
    debug_mode = True
    
    mylog = Logger("Clean up", folder + "main_logfile.txt", debug_mode = debug_mode)
    
    mylog.log("clean up for folder: ")
    mylog.log(folder)
    
    avg = AvgFolderMem(folder)
    
    subfolders = ["processed_images", "aligned_images", 
                      "correlation_images"]
    
    for subfolder in subfolders:
        mylog.log("Cleaned: " + subfolder)
        shutil.rmtree(avg.subfolders[subfolder])
    
    

if __name__ == "__main__":
    print("START AVERAGING SCRIPT")
    main(sys.argv)

#    folders = ["dataset45", "dataset46", "dataset47", "dataset48", "dataset49"]
#    #folders = ["dataset42"]
#    
#    for fldr in folders:
#        folder = "../../silentcam/" + fldr + "/"
#        
#        create_dataset = False
#        create_rgb_dataset = False
#        avgerage_gray = True
#        average_rgb = True
#        produce_graphs = True
#        clean_up_files = False
#    
#        if create_dataset:
#            run_create_test_dataset(folder)
#        
#        if create_rgb_dataset:
#            run_create_rgb_dataset(folder)
#       
#        if avgerage_gray:
#            run_average_gray(folder)
#        
#        if average_rgb:
#            run_average_rgb(folder)
#    
#        if produce_graphs:
#            run_produce_graphs(folder)
#            
#        if clean_up_files:
#            run_clean_up(folder)

    
    print("SCRIPT FINISH!")
